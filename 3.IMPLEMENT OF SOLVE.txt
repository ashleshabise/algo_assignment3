/********************************************************************************
*   	MTH 524A
*   	Homework-3
*   	Group ID : 04
*   	Problem 3
********************************************************************************/

#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<math.h>
#define a 16
#define SIZE 100 
#define TRUE 1
#define FALSE 0
int M=0,N=0,K=0,n,m;

bool LU-DECOMPOSITION(int A[n][n]);
bool SOLVE-LS(float A[n][n],float b[n],char* FileForOutput);
float F-l-Gamma(float r[k][2],float Gamma[k],int l[2],float q[2]);
bool partition(float r[3],int L, int lMatrix[L][L][L], struct node* pointList[L][L][L]);
bool partitionAll(int L, char* inputFileName, char* outputFileName);
bool BUILD-MATRIX(int L, char* fileForP, char* fileForQ, char* fileForMatrix);
bool SOLVE(int L,char* argv[3],char* argv[1],char* argv[2],char* argv[4],char* argv[5]);
void push(struct node** head, float r[3]);


int main(int argc,char*argv[])
{
struct node {
	float r[3];
	struct node* next;
};

if (argc!=9)
	printf("All input files are not Given);
printf("Input Value of L");
int L;
scanf("%d",&L);	
bool result1;		
	result1=SOLVE(int L,char* argv[3],char* argv[1],char* argv[2],char* argv[4],char* argv[5]);
	if(result)
		printf("\nProgram Implemented Successfully");
	else
		printf("\nProgram doesn't Implemented Successfully");
return 0;
}

bool LU-DECOMPOSITION(int A[n][n])
{
	int i,j,k;
	float L[n][n],U[n][n],sum1,sum2;
	for(i=1;i<n;i++)
		L[i][1]=A[i][1];
	for(j=1;j<n;j++)
		U[1][j]=A[1][j]/L[1][1];
	for(i=1;i<n;i++)
		for(j=1;j<n;j++)
			{
				sum1=0.0;
				sum2=0.0;
				if(i>=j)
					{
						for(k=1;k<=j-1;k++)
							sum1+=L[i][k]*U[k][j];
						L[i][j]=A[i][j]-sum1;
						if(i==j)
							U[i][j]=1;
						else
							U[i][j]=0;
					}
				else
					{
						L[i][j]=0;
						for(k=1;k<=i-1;k++)
							sum2+=L[i][k]*U[k][j];
						U[i][j]=(A[i][j]-sum2)/L[i][i];
					}
			}
/*Printing the Lower and Upper triangular Matrix in Decomposition file*/
	FILE* fdecL;
	fdec=fopen("LDecomposition","w");
	if(fdecL!=NULL)
	{
		for(i=1;i<n;i++)
			for(j=1;j<n;j++)
				fprintf(fdecL,"%d %d %.3f\n",i,j,L[i][j]);
	}
	else
		printf("Couldnot able to open LDecomposition File");
	fclose(fdecL);
	
	FILE* fdecU;
	fdec=fopen("UDecomposition","w");
	if(fdecU!=NULL)
	{
		for(i=1;i<n;i++)
			for(j=1;j<n;j++)
				fprintf(fdecU,"%d %d %.3f\n",i,j,U[i][j]);
	}
	else
		printf("Couldnot able to open UDecomposition File");
	fclose(fdecU);

	return true;
}

/*******************************************************************************/
bool SOLVE-LS(float A[n][n],float b[n],char* FileForOutput)
{	
	float L[n][n],U[n][n],x1[n],x2[n],sum1,sum2;
	printf("Decomposing the Matrix\n");
	LU-DECOMPOSITION(A[n][n])

	/*Read the LDecomposition File*/
	FILE* fdecL;
	fdec=fopen("LDecomposition","w");
	if(fdecL!=NULL)
	{
		while (fgets(str,SIZE,fdecL) != NULL)
			sscanf(str,"%d %d %f",&i,&j,&L[i][j]);
	}
	else
		printf("Couldnot able to open LDecomposition File");
	fclose(fdecL);

	/*Read the UDecomposition File*/
	FILE* fdecU;
	fdec=fopen("UDecomposition","w");
	if(fdecU!=NULL)
	{
		while (fgets(str,SIZE,fdecU) != NULL)
			sscanf(str,"%d %d %f",&i,&j,&U[i][j]);
	}
	else
		printf("Couldnot able to open UDecomposition File");
	fclose(fdecU);
	
	for(i=0;i<n;i++)
	{
		sum1=0.0;
		for(j=0;j<i;j++)
			sum1+=L[i][j]*x1[j];
		x1[i]=(b[i]-sum1)/L[i][i];
	}
	for(i=n;i>=0;i--)
	{
		sum2=0.0;
		for(j=i+1;j<n;j++)
			sum2+=U[i][j]*x2[j];
		x2[i]=(x1[i]-sum2)/U[i][i];
	}
	
/*Print the result in Output File*/
	FILE* fout;
	fdec=fopen("FileForOutput","a");
	if(fout!=NULL)
	{
		for(i=1;i<n;i++)
			fprintf(fdecL,"%d %.3f\n",i,x2[i]);
	}
	else
		printf("Couldnot able to open FileForOutput File");
	fclose(fout);
	
return true;
}


/******************************************************************************/

float F-l-Gamma(float r[k][2],float Gamma[k],int l[2],float q[2])
{
	float sum=0,j;
	for(j=0,j<k,j++)
		{
			temp = sqrt( powf((q[0] - r[j][0]),2) + powf((q[1] - r[j][1]),2) + powf((q[2] - r[j][2]),2));
			sum+= temp ? (sinf(temp))*Gamma[j]/temp : Gamma[j];
		}
	return sum;
}

/******************************************************************************/

bool partition(float r[3],int L, int lMatrix[L][L][L], struct node* pointList[L][L][L]) {
	//validity check for r[3]
	fflush(stdout);
	printf("Entering partition\n");
	int i;
	for(i=0;i<3;i++) { 
		if(!(r[i]>=0 && r[i] <= a)) {  
			printf(" Input Invalid");
					return FALSE;
		}
		printf("%f ", r[i]);
	}
	printf("\n");
	//validity check for L
	if(!(L>0))
		printf(" Input Invalid");

	FILE* fPartition;
	fPartition=fopen("partitionFile", "a");
	if(fPartition==NULL) {
		printf("Couldn't open partition file");
		return FALSE;
	}
	float x[3];
	printf("opened partition file\n");
	int l[3],binary[3], bString=0, temp;
	for (i=0; i<3; i++)	{
	printf("generating binary string: ");
	 x[i]=(r[i]*L)/a;
	 l[i] = (int)x[i];
	 // for x1, temp=1. binary = 0 | 1 = 1
	 // for x2, temp=0, binary =  1<<1 = 10 | 0 = 10
	 // for x3, temp=1, binary  = 10<<1  = 100 | 1 = 101
	 printf("%f %d", x[i], l[i]);
	 binary[i] =  (x[i]-l[i]) ? 0 : 1;
	 printf("binary[%d] : %d \n",i, binary[i]);
	 bString = bString<<1 | binary[i];
	} 
	printf("\n");
	// write 000 always. 
	fprintf(fPartition,"%d %d %d %f %f %f\n", l[0], l[1], l[2], r[0],r[1],r[2]);
	// update the lMatrix as well. 
	lMatrix[l[0]][l[1]][l[2]]++;
	int b1,b2,b3;
	int done[8]={0,0,0,0,0,0,0,0},result;
	for ( i=1; i <= bString; i++)   {
	printf("writing l[] into partition file\n");
		result = bString & i;
		if (result ) {
			b1=result&4 ? 1:0;
			b2=result&2 ? 1:0;
			b3=result&1 ? 1:0;
			// update the lMatrix
			if (!done[result]) {
				fprintf(fPartition,"%d %d %d %f %f %f\n", l[0]-b1, l[1]-b2, l[2]-b3, r[0],r[1],r[2]);
				lMatrix[l[0]-b1][l[1]-b2][l[2]-b3]++;
				// push the point corresponding to l[] to the pointList 
				push(&pointList[l[0]-b1][l[1]-b2][l[2]-b3],r);
				done[result]=1;
			}
			printf("%d\n", done[result]);
		}
	}
	fclose(fPartition);
	return TRUE;
}
/******************************************************************************/
bool partitionAll(int L, char* inputFileName, char* outputFileName) 
{
	printf("Entering partitionall\n");
	float r[3];
	float **R;
	// Declaring helper variables 
	int i,j,k;
	int a1,a2,a3;
	float x1,x2,x3, temp1, temp2, temp3;
	int lMatrix[L][L][L],K=0;
	// initialise every element of lMatrix to 0. 
	for ( i=0; i<L; i++) 
		for ( j=0; j<L; j++) 
			for ( k=0; k<L; k++) 
				lMatrix[i][j][k]=0;

	FILE *fin, *fout;
	fin = fopen(inputFileName,"r");
	if (fin != NULL) {
		char str[SIZE];
		while (fgets(str,SIZE,fin) != NULL) {
			printf("getting data from input file\n");
			/*
			temp1 = x1;
			temp2 = x2;
			temp3 = x3;
			*/
			sscanf(str, "%f %f %f", &x1, &x2, &x3);
			printf("%f %f %f\n", x1,x2,x3);
			if (x1>a || x1<0 /*|| x1==temp1*/ ) { 
				printf("Input Failed\n");
				return FALSE;
			}
			if (x2>a || x2<0 /*|| x2==temp2*/) {
				printf("Input Failed\n");
				return FALSE;
			}
			if (x3>a || x3<0 /*|| x3==temp3*/) {
				printf("Input Failed\n");
				return FALSE;
			}
			r[0] = x1;
			r[1] = x2;
			r[2] = x3;
			partition(r,L,lMatrix);
			// so we have K points. 
			K++;
		}
	}
	else {
		printf("Could not open the input File  \n");
		return 1;
	}
	fclose(fin);
	fout = fopen(outputFileName, "w");
	FILE *fPartition ;
	char str[SIZE];
	for ( i=0; i<L; i++) {
		for ( j=0; j<L; j++) {
			for ( k=0; k<L; k++) {
				fprintf(fout,"%d %d %d\n", i, j, k);
				fprintf(fout,"%d\n",lMatrix[i][j][k]);
				// open the partition file
				fPartition = fopen("partitionFile", "r");
				while (fgets(str,SIZE,fPartition) != NULL) {
					sscanf(str,"%d %d %d %f %f %f",&a1,&a2,&a3,&x1,&x2,&x2);
					if (i==a1 && j==a2 && k==a3)
						fprintf(fout,"%f %f %f\n",x1,x2,x3);
				}
				// close the partition file.
				fclose(fPartition);
			}
		}
	}
	fclose(fout);
	return TRUE;
}
/*******************************************************************************/
bool BUILD-MATRIX(int L, char* fileForP, char* fileForQ, char* fileForMatrix) {
	float x[3], temp1, temp2, temp3;
	float x1,x2,x3;
	FILE *fp, *fq, *fMatrix;
	int i,j;
	float P[100][3],Q[100][3];
	// Initialise P and Q to 0
	for (i=0; i < 100; i++) {
		for ( j=0;j<3; j++) {
			P[i][j] = Q[i][j] = 0;
		}
	}
	fp = fopen(fileForP,"r");
	if (fp != NULL) {
		char str[SIZE];
		// Checking validity of input P and pushing valid data into P matrix
		while (fgets(str,SIZE,fp) != NULL) {
			sscanf(str, "%f%f%f", &x[0], &x[1], &x[2]);
			/*int flag = 0;
			for ( i=0; i<3; i++) {
			// check for 0<= x[i] <= a
				if (x[i]>a || x[i]<0) {
					printf("initial condition : Invalid Input for P");
					return FALSE;
				}
				if (!( (((a*l[i])/L == x[i]) ||(x[i] == (a*(l[i]+1)/L)))   &&   ( ((a*l[(i+1)%3])/L <= x[(i+1)%3]) && (x[(i+1)%3]<= (a*(l[(i+1)%3]+1)/L)) )   &&   ( ((a*l[(i+2)%3])/L <= x[(i+2)%3]) &&  (x[(i+2)%3]<= (a*(l[(i+2)%3]+1))/L) ))) {
					flag++;
				}
			}
		
		//		If the condition fails for all three co-ordinates,
		//		the point is not a boundary point
		
			if (flag==3) {
				printf("Invalid Input for P\n");
				return FALSE;
			}*/
			P[N][0] = x[0];
			P[N][1] = x[1];
			P[N][2] = x[2];
 			/* This will count no. of inputs in file for P*/
			N++;
		}
	} else {
		printf("Could not open the input File  \n");
		return 1;
	}
	fclose(fp);
	fq = fopen(fileForQ,"r");
	// Checking validity of input Q and pushing valid data into Q Matrix
	if (fq != NULL) {
		char str2[SIZE];
		while (fgets(str2,SIZE,fq) != NULL) {
			sscanf(str2, "%f%f%f", &x[0], &x[1], &x[2]);
			/*// Calculate the radius of the sphere. 
			float sum= powf(2*a/(float)L,2);
			// Check if the point lies on the sphere.
			for(i=0; i<3 ; i++)
				sum-= powf(x[i]-((2*l[i]+1)*a)/(2*L), 2);

			// Decide the validity accordingly
			if(sum) {
					printf("Input data for Q is Invalid");
					return false; 
				}*/
			Q[M][0] = x[0];
			Q[M][1] = x[1];
			Q[M][2] = x[2];
 			/* This will count no. of inputs in file for Q*/
			M++;
		}
 } else {
		printf("Could not open the input File  \n");
		return 1;
	}
	fclose(fq);
   /* Determination of Matrix A[i][j]*/
	float A[M][N]; 
	for ( i =0; i < M; i++) {
		for ( j =0; j < N; j++) {
			float temp;
			// sqrt( x^2 + y^2 + z^2 ) 
			temp = sqrt( powf((Q[i][0] - P[j][0]), 2) + powf((Q[i][1] - P[j][1]), 2) + powf((Q[i][2] - P[j][2]), 2));
			A[i][j]= temp ? (sinf(temp))/temp : 1;
		}
	}
     /* Write the Matrix A into an output file named Amatrix */
	FILE* fMatrix;
	fdec=fopen("Amatrix","w");
	if(fMatrix!=NULL)
	{
		for(i=1;i<N;i++)
			for(j=1;j<N;j++)
				fprintf(fMatrix,"%d %d %.3f\n",i,j,A[i][j]);
	}
	else
		printf("Couldnot able to open Amatrix File");
	fclose(fMatrix);
// Finding the Product Matrix of A and Transpose of A 
	float result[N][N];
		for ( i =0; i < N; i++) {
			for ( j =0; j <= i; j++) {
				result[i][j] = 0;
				for ( int k=0; k<N; k++) {
					result[i][j]+= A[k][i] * A[k][j];
				}
				result[j][i] = result[i][j];
			}
		}
	fMatrix = fopen(fileForMatrix, "w");
		for ( i =0; i < M; i++) {
			for ( j =0; j < M; j++) {
					fprintf(fMatrix, "%d %d %f\n", i, j, result[i][j]);
				}
		}
	fclose(fMatrix);
}

/*****************************************************************************************/

bool SOLVE(int L,char* argv[3],char* argv[1],char* argv[2],char* argv[4],char* argv[5])
/* argv[1] == file for P
   argv[2] == file for Q
   argv[3] == file for R
   argv[4] == file for Gamma
   argv[5] == file for FileforOutput for storing values of Si
   argv[6] == file for Partition-all
   argv[7] == file for Amatrix
   argv[8] == file for productMatrix named FileForMatrix
*/  
{	int i=0a,b,c,p,b[M];
	PARTITION-ALL(L,argv[3],argv[6]);
	BUILD-MATRIX(L,l,argv[1],argv[2],argv[8]);
	float A[M][N],Prod[N][N],r[K][2],Gamma[K];
	/* Read the Amatrix file*/
	FILE* fAmatrix;
	fAmatrix=fopen("Amatrix,"r");
	if(fAmatrix!=NULL)
	{
		while (fgets(str,SIZE,fAmatrix) != NULL)
			sscanf(str,"%d %d %f",&i,&j,&A[i][j]);
	}
	else
		printf("Couldnot able to open Amatrix File");
	fclose(fAmatrix);
	
	/* Read the FileForMatrix */
	FILE* fFileForMatrix;
	fdec=fopen(argv[8],"r");
	if(fFileForMatrix!=NULL)
	{
		while (fgets(str,SIZE,fFileForMatrix) != NULL)
			sscanf(str,"%d %d %f",&i,&j,&Prod[i][j]);
	}
	else
		printf("Couldnot able to open FileForMatrix File");
	fclose(fFileForMatrix);

	/* Read the FileForR */
	FILE* fr;
	fr=fopen(argv[3],"r");
	if(fr!=NULL)
	{
		while (fgets(str,SIZE,fr) != NULL)
			sscanf(str, "%f %f %f", &r[i][0], &r[i][1], &r[i][2]);
	}
	else
		printf("Couldnot able to open FileForR File");
	fclose(fr);

	/* Read the FileForGamma */
	FILE* fGamma;
	fGamma=fopen(argv[4],"r");
	if(fGamma!=NULL)
	{
		while (fgets(str,SIZE,fGamma) != NULL)
			sscanf(str, "%f", &Gamma[i]);
	}
	else
		printf("Couldnot able to open FileForGamma File");
	fclose(fGamma);	
	for(a=0;a<L;a++)
		for(b=0;b<L;b++)
			for(c=0;c<L;c++)
				for(p=1;p<=m;p++)
				{
					F[a][b][c][p]= F-l-Gamma(r[c][2],Gamma[c],l[2],q[2]+l/L);	/*this calculate F at different values of L for different q's*/
					/*finding product of Atranspose and F and save into b[1...m]*/
					for(i=0;i<M;i++)
						b[i]=0;
					for(i=0;i<M;i++)
						b[i]+= A[i][p]*F[a][b][c][p];
					SOLVE-LS(A[m][n],b[n],argv[5])
				}
	return true;
}


/*********************************************************************************/
void push(struct node** head, float r[3]) 
{
	struct node* newNode = (struct node*)(malloc(sizeof(struct node)));
	newNode->next = NULL;
	int i;
	// copy r[i] into newNode->r[i];
	for (i=0; i<3; i++) newNode->r[i] = r[i];
	if ( *head == NULL) {
		*head = newNode;
		return;
	}
	newNode->next = *head;
	*head = newNode;
}